
C:\Users\lenovo>python
Python 3.9.6 (tags/v3.9.6:db3ff76, Jun 28 2021, 15:26:21) [MSC v.1929 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> help()

Welcome to Python 3.9's help utility!

If this is your first time using Python, you should definitely check out
the tutorial on the Internet at https://docs.python.org/3.9/tutorial/.

Enter the name of any module, keyword, or topic to get help on writing
Python programs and using Python modules.  To quit this help utility and
return to the interpreter, just type "quit".

To get a list of available modules, keywords, symbols, or topics, type
"modules", "keywords", "symbols", or "topics".  Each module also comes
with a one-line summary of what it does; to list the modules whose name
or summary contain a given string such as "spam", type "modules spam".

help> modules

Please wait a moment while I gather a list of all available modules...

C:\Users\lenovo\AppData\Roaming\Python\Python39\site-packages\IPython\kernel\__init__.py:12: ShimWarning: The `IPython.kernel` package has been deprecated since IPython 4.0.You should import from ipykernel or jupyter_client instead.
  warn("The `IPython.kernel` package has been deprecated since IPython 4.0."
C:\Users\lenovo\AppData\Local\Programs\Python\Python39\lib\pkgutil.py:108: VisibleDeprecationWarning: zmq.eventloop.minitornado is deprecated in pyzmq 14.0 and will be removed.
    Install tornado itself to use zmq with the tornado IOLoop.

  yield from walk_packages(path, info.name+'.', onerror)
2022-01-11 03:02:26.613728: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'cudart64_110.dll'; dlerror: cudart64_110.dll not found
2022-01-11 03:02:26.645257: I tensorflow/stream_executor/cuda/cudart_stub.cc:29] Ignore above cudart dlerror if you do not have a GPU set up on your machine.
C:\Users\lenovo\AppData\Roaming\Python\Python39\site-packages\_distutils_hack\__init__.py:35: UserWarning: Setuptools is replacing distutils.
  warnings.warn("Setuptools is replacing distutils.")
IPython             calendar            mmapfile            sys
PIL                 certifi             mmsystem            sysconfig
__future__          cgi                 modulefinder        tabnanny
_abc                cgitb               msilib              tabulate
_aix_support        charset_normalizer  msvcrt              tarfile
_ast                chunk               multiprocessing     telnetlib
_asyncio            clang               nest_asyncio        tempfile
_bisect             cmath               netbios             tensorboard
_blake2             cmd                 netrc               tensorboard_data_server
_bootlocale         code                nntplib             tensorboard_plugin_wit
_bootsubprocess     codecs              nt                  tensorflow
_bz2                codeop              ntpath              tensorflow_estimator
_codecs             collections         ntsecuritycon       tensorflow_io_gcs_filesystem
_codecs_cn          colorama            nturl2path          termcolor
_codecs_hk          colorsys            numbers             test
_codecs_iso2022     commctrl            numpy               tests
_codecs_jp          compileall          oauthlib            textwrap
_codecs_kr          concurrent          odbc                this
_codecs_tw          configparser        opcode              threading
_collections        contextlib          openpyxl            threadpoolctl
_collections_abc    contextvars         operator            time
_compat_pickle      copy                opt_einsum          timeit
_compression        copyreg             optparse            timer
_contextvars        crypt               os                  tkinter
_csv                csv                 packaging           token
_ctypes             ctypes              pandas              tokenize
_ctypes_test        curses              pandas_datareader   tornado
_datetime           cv2                 parser              trace
_decimal            cycler              parso               traceback
_distutils_hack     cythonmagic         pasta               tracemalloc
_elementtree        dataclasses         pathlib             traitlets
_functools          datetime            pdb                 tty
_hashlib            dateutil            perfmon             turtle
_heapq              dbi                 pickle              turtledemo
_imp                dbm                 pickleshare         types
_io                 dde                 pickletools         typing
_json               debugpy             pip                 typing_extensions
_locale             decimal             pipes               unicodedata
_lsprof             decorator           pkg_resources       unittest
_lzma               difflib             pkgutil             urllib
_markupbase         dis                 platform            urllib3
_md5                distlib             platformdirs        uu
_msi                distutils           plistlib            uuid
_multibytecodec     doctest             poplib              venv
_multiprocessing    email               posixpath           virtualenv
_opcode             encodings           pprint              warnings
_operator           ensurepip           profile             wave
_osx_support        entrypoints         prompt_toolkit      wcwidth
_overlapped         enum                pstats              weakref
_peg_parser         errno               pty                 webbrowser
_pickle             et_xmlfile          py_compile          werkzeug
_py_abc             faulthandler        pyasn1              wheel
_pydecimal          filecmp             pyasn1_modules      win2kras
_pyio               fileinput           pyclbr              win32api
_queue              filelock            pydoc               win32clipboard
_random             flatbuffers         pydoc_data          win32com
_sha1               fnmatch             pyexpat             win32con
_sha256             fontTools           pygments            win32console
_sha3               formatter           pylab               win32cred
_sha512             fractions           pymysql             win32crypt
_signal             ftplib              pyparsing           win32cryptcon
_sitebuiltins       functools           pythoncom           win32event
_socket             gast                pytz                win32evtlog
_sqlite3            gc                  pywin               win32evtlogutil
_sre                genericpath         pywin32_bootstrap   win32file
_ssl                getopt              pywin32_testutil    win32gui
_stat               getpass             pywintypes          win32gui_struct
_statistics         gettext             queue               win32help
_string             glob                quopri              win32inet
_strptime           google_auth_oauthlib random              win32inetcon
_struct             graphlib            rasutil             win32job
_symtable           grpc                re                  win32lz
_testbuffer         gzip                regcheck            win32net
_testcapi           h5py                regutil             win32netcon
_testconsole        hashlib             reprlib             win32pdh
_testimportmultiple heapq               requests            win32pdhquery
_testinternalcapi   hmac                requests_oauthlib   win32pdhutil
_testmultiphase     html                rlcompleter         win32pipe
_thread             http                rmagic              win32print
_threading_local    idlelib             rsa                 win32process
_tkinter            idna                runpy               win32profile
_tracemalloc        imaplib             sched               win32ras
_uuid               imghdr              scipy               win32rcparser
_warnings           imp                 secrets             win32security
_weakref            importlib           select              win32service
_weakrefset         importlib_metadata  selectors           win32serviceutil
_win32sysloader     inspect             servicemanager      win32timezone
_winapi             io                  setuptools          win32trace
_winxptheme         ipaddress           shelve              win32traceutil
_xxsubinterpreters  ipykernel           shlex               win32transaction
_zoneinfo           ipykernel_launcher  shutil              win32ts
abc                 isapi               signal              win32ui
absl                itertools           site                win32uiole
adodbapi            jedi                six                 win32verstamp
afxres              joblib              sklearn             win32wnet
aifc                json                smtpd               winerror
antigravity         jupyter             smtplib             winioctlcon
argparse            jupyter_client      sndhdr              winnt
array               jupyter_core        socket              winperf
ast                 keras               socketserver        winreg
astunparse          keras_preprocessing sqlite3             winsound
asynchat            keyword             sre_compile         winxpgui
asyncio             kiwisolver          sre_constants       winxptheme
asyncore            lib2to3             sre_parse           wrapt
atexit              linecache           ssl                 wsgiref
audioop             locale              sspi                xdrlib
autoreload          logging             sspicon             xml
backcall            lxml                stat                xmlrpc
backports           lzma                statistics          xxsubtype
base64              mailbox             storemagic          zipapp
bdb                 mailcap             string              zipfile
binascii            markdown            stringprep          zipimport
binhex              marshal             struct              zipp
bisect              math                subprocess          zlib
builtins            matplotlib          sunau               zmq
bz2                 matplotlib_inline   symbol              zoneinfo
cProfile            mimetypes           sympyprinting       ~lotly
cachetools          mmap                symtable            ~lotlywidget

Enter any module name to get more help.  Or, type "modules spam" to search
for modules whose name or summary contain the string "spam".

help> tkinter
Help on package tkinter:

NAME
    tkinter - Wrapper functions for Tcl/Tk.

MODULE REFERENCE
    https://docs.python.org/3.9/library/tkinter

    The following documentation is automatically generated from the Python
    source files.  It may be incomplete, incorrect or include features that
    are considered implementation detail and may vary between Python
    implementations.  When in doubt, consult the module reference at the
    location listed above.

DESCRIPTION
    Tkinter provides classes which allow the display, positioning and
    control of widgets. Toplevel widgets are Tk and Toplevel. Other
    widgets are Frame, Label, Entry, Text, Canvas, Button, Radiobutton,
    Checkbutton, Scale, Listbox, Scrollbar, OptionMenu, Spinbox
    LabelFrame and PanedWindow.

    Properties of the widgets are specified with keyword arguments.
    Keyword arguments have the same name as the corresponding resource
    under Tk.

    Widgets are positioned with one of the geometry managers Place, Pack
    or Grid. These managers can be called with methods place, pack, grid
    available in every Widget.

    Actions are bound to events by resources (e.g. keyword argument
    command) or with the method bind.

    Example (Hello, World):
    import tkinter
    from tkinter.constants import *
    tk = tkinter.Tk()
    frame = tkinter.Frame(tk, relief=RIDGE, borderwidth=2)
    frame.pack(fill=BOTH,expand=1)
    label = tkinter.Label(frame, text="Hello, World")
    label.pack(fill=X, expand=1)
    button = tkinter.Button(frame,text="Exit",command=tk.destroy)
    button.pack(side=BOTTOM)
    tk.mainloop()

PACKAGE CONTENTS
    __main__
    colorchooser
    commondialog
    constants
    dialog
    dnd
    filedialog
    font
    messagebox
    scrolledtext
    simpledialog
    test (package)
    tix
    ttk

CLASSES
    builtins.Exception(builtins.BaseException)
        _tkinter.TclError
    builtins.object
        builtins.float
        builtins.int
        CallWrapper
        Event
        Grid
        Image
            BitmapImage
            PhotoImage
        Misc
            BaseWidget
                Toplevel(BaseWidget, Wm)
                Widget(BaseWidget, Pack, Place, Grid)
                    Button
                    Canvas(Widget, XView, YView)
                    Checkbutton
                    Entry(Widget, XView)
                    Frame
                    Label
                    LabelFrame
                    Listbox(Widget, XView, YView)
                    Menu
                    Menubutton
                        OptionMenu
                    Message
                    PanedWindow
                    Radiobutton
                    Scale
                    Scrollbar
                    Spinbox(Widget, XView)
                    Text(Widget, XView, YView)
            Tk(Misc, Wm)
        Pack
        Place
        Variable
            BooleanVar
            DoubleVar
            IntVar
            StringVar
        Wm
        XView
        YView
    builtins.str(builtins.object)
        EventType(builtins.str, enum.Enum)
    enum.Enum(builtins.object)
        EventType(builtins.str, enum.Enum)

    class BaseWidget(Misc)
     |  BaseWidget(master, widgetName, cnf={}, kw={}, extra=())
     |
     |  Internal class.
     |
     |  Method resolution order:
     |      BaseWidget
     |      Misc
     |      builtins.object
     |
     |  Methods defined here:
     |
     |  __init__(self, master, widgetName, cnf={}, kw={}, extra=())
     |      Construct a widget with the parent widget MASTER, a name WIDGETNAME
     |      and appropriate options.
     |
     |  destroy(self)
     |      Destroy this and all descendants widgets.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |
     |  __getitem__ = cget(self, key)
     |
     |  __repr__(self)
     |      Return repr(self).
     |
     |  __setitem__(self, key, value)
     |
     |  __str__(self)
     |      Return the window path name of this widget.
     |
     |  after(self, ms, func=None, *args)
     |      Call function once after given time.
     |
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |
     |  after_cancel(self, id)
     |      Cancel scheduling of function identified with ID.
     |
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |
     |  after_idle(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |
     |  anchor = grid_anchor(self, anchor=None)
     |
     |  bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |
     |  bell(self, displayof=0)
     |      Ring a display's bell.
     |
     |  bind(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |
     |  bind_all(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |
     |  bind_class(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |
     |  bindtags(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |
     |  cget(self, key)
     |      Return the resource value for a KEY given as string.
     |
     |  clipboard_append(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |
     |  clipboard_clear(self, **kw)
     |      Clear the data in the Tk clipboard.
     |
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |
     |  clipboard_get(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |
     |      This command is equivalent to:
     |
     |      selection_get(CLIPBOARD)
     |
     |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
     |
     |  config = configure(self, cnf=None, **kw)
     |
     |  configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |
     |  deletecommand(self, name)
     |      Internal function.
     |
     |      Delete the Tcl command provided in NAME.
     |
     |  event_add(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |
     |  event_delete(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |
     |  event_generate(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |
     |  event_info(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |
     |  focus = focus_set(self)
     |
     |  focus_displayof(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |
     |      Return None if the application does not have the focus.
     |
     |  focus_force(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |
     |  focus_get(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |
     |  focus_lastfor(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |
     |  focus_set(self)
     |      Direct input focus to this widget.
     |
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |
     |  getboolean(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |
     |  getdouble(self, s)
     |
     |  getint(self, s)
     |
     |  getvar(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |
     |  grab_current(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |
     |  grab_release(self)
     |      Release grab for this widget if currently set.
     |
     |  grab_set(self)
     |      Set grab for this widget.
     |
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |
     |  grab_set_global(self)
     |      Set global grab for this widget.
     |
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |
     |  grab_status(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |
     |  grid_anchor(self, anchor=None)
     |      The anchor value controls how to place the grid within the
     |      master when no row/column has any weight.
     |
     |      The default anchor is nw.
     |
     |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |
     |  grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |
     |  grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |
     |  grid_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |
     |  grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |
     |  grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |
     |  grid_slaves(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  image_names(self)
     |      Return a list of all existing image names.
     |
     |  image_types(self)
     |      Return a list of all available image types (e.g. photo bitmap).
     |
     |  keys(self)
     |      Return a list of all resource names of this widget.
     |
     |  lift = tkraise(self, aboveThis=None)
     |
     |  lower(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |
     |  mainloop(self, n=0)
     |      Call the mainloop of Tk.
     |
     |  nametowidget(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |
     |  option_add(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |
     |  option_clear(self)
     |      Clear the option database.
     |
     |      It will be reloaded if option_add is called.
     |
     |  option_get(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |
     |      Values with higher priority override lower values.
     |
     |  option_readfile(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |
     |      An optional second parameter gives the numeric
     |      priority.
     |
     |  pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |
     |  pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  place_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  propagate = pack_propagate(self, flag=['_noarg_'])
     |
     |  quit(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |
     |  register = _register(self, func, subst=None, needcleanup=1)
     |
     |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
     |
     |  selection_clear(self, **kw)
     |      Clear the current X selection.
     |
     |  selection_get(self, **kw)
     |      Return the contents of the current X selection.
     |
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |
     |  selection_handle(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |
     |  selection_own(self, **kw)
     |      Become owner of X selection.
     |
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |
     |  selection_own_get(self, **kw)
     |      Return owner of X selection.
     |
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |
     |  send(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |
     |  setvar(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |
     |  size = grid_size(self)
     |
     |  slaves = pack_slaves(self)
     |
     |  tk_bisque(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |
     |  tk_focusFollowsMouse(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |
     |  tk_focusNext(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |
     |  tk_focusPrev(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |
     |  tk_setPalette(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |
     |  tk_strictMotif(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |
     |  tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |
     |  unbind(self, sequence, funcid=None)
     |      Unbind for this widget for event SEQUENCE  the
     |      function identified with FUNCID.
     |
     |  unbind_all(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |
     |  unbind_class(self, className, sequence)
     |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |
     |  update(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |
     |  update_idletasks(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |
     |  wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |
     |  wait_visibility(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |
     |      If no parameter is given self is used.
     |
     |  wait_window(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |
     |      If no parameter is given self is used.
     |
     |  waitvar = wait_variable(self, name='PY_VAR')
     |
     |  winfo_atom(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |
     |  winfo_atomname(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |
     |  winfo_cells(self)
     |      Return number of cells in the colormap for this widget.
     |
     |  winfo_children(self)
     |      Return a list of all widgets which are children of this widget.
     |
     |  winfo_class(self)
     |      Return window class name of this widget.
     |
     |  winfo_colormapfull(self)
     |      Return True if at the last color request the colormap was full.
     |
     |  winfo_containing(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |
     |  winfo_depth(self)
     |      Return the number of bits per pixel.
     |
     |  winfo_exists(self)
     |      Return true if this widget exists.
     |
     |  winfo_fpixels(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |
     |  winfo_geometry(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |
     |  winfo_height(self)
     |      Return height of this widget.
     |
     |  winfo_id(self)
     |      Return identifier ID for this widget.
     |
     |  winfo_interps(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |
     |  winfo_ismapped(self)
     |      Return true if this widget is mapped.
     |
     |  winfo_manager(self)
     |      Return the window manager name for this widget.
     |
     |  winfo_name(self)
     |      Return the name of this widget.
     |
     |  winfo_parent(self)
     |      Return the name of the parent of this widget.
     |
     |  winfo_pathname(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |
     |  winfo_pixels(self, number)
     |      Rounded integer value of winfo_fpixels.
     |
     |  winfo_pointerx(self)
     |      Return the x coordinate of the pointer on the root window.
     |
     |  winfo_pointerxy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |
     |  winfo_pointery(self)
     |      Return the y coordinate of the pointer on the root window.
     |
     |  winfo_reqheight(self)
     |      Return requested height of this widget.
     |
     |  winfo_reqwidth(self)
     |      Return requested width of this widget.
     |
     |  winfo_rgb(self, color)
     |      Return a tuple of integer RGB values in range(65536) for color in this widget.
     |
     |  winfo_rootx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |
     |  winfo_rooty(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |
     |  winfo_screen(self)
     |      Return the screen name of this widget.
     |
     |  winfo_screencells(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |
     |  winfo_screendepth(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |
     |  winfo_screenheight(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |
     |  winfo_screenmmheight(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |
     |  winfo_screenmmwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |
     |  winfo_screenvisual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |
     |  winfo_screenwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |
     |  winfo_server(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |
     |  winfo_toplevel(self)
     |      Return the toplevel widget of this widget.
     |
     |  winfo_viewable(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |
     |  winfo_visual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |
     |  winfo_visualid(self)
     |      Return the X identifier for the visual for this widget.
     |
     |  winfo_visualsavailable(self, includeids=False)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if includeids is true is given also the X identifier.
     |
     |  winfo_vrootheight(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |
     |  winfo_vrootwidth(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |
     |  winfo_vrootx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |
     |  winfo_vrooty(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |
     |  winfo_width(self)
     |      Return the width of this widget.
     |
     |  winfo_x(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |
     |  winfo_y(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Misc:
     |
     |  __dict__
     |      dictionary for instance variables (if defined)
     |
     |  __weakref__
     |      list of weak references to the object (if defined)

    class BitmapImage(Image)
     |  BitmapImage(name=None, cnf={}, master=None, **kw)
     |
     |  Widget which can display images in XBM format.
     |
     |  Method resolution order:
     |      BitmapImage
     |      Image
     |      builtins.object
     |
     |  Methods defined here:
     |
     |  __init__(self, name=None, cnf={}, master=None, **kw)
     |      Create a bitmap with NAME.
     |
     |      Valid resource names: background, data, file, foreground, maskdata, maskfile.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Image:
     |
     |  __del__(self)
     |
     |  __getitem__(self, key)
     |
     |  __setitem__(self, key, value)
     |
     |  __str__(self)
     |      Return str(self).
     |
     |  config = configure(self, **kw)
     |
     |  configure(self, **kw)
     |      Configure the image.
     |
     |  height(self)
     |      Return the height of the image.
     |
     |  type(self)
     |      Return the type of the image, e.g. "photo" or "bitmap".
     |
     |  width(self)
     |      Return the width of the image.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Image:
     |
     |  __dict__
     |      dictionary for instance variables (if defined)
     |
     |  __weakref__
     |      list of weak references to the object (if defined)

    class BooleanVar(Variable)
     |  BooleanVar(master=None, value=None, name=None)
     |
     |  Value holder for boolean variables.
     |
     |  Method resolution order:
     |      BooleanVar
     |      Variable
     |      builtins.object
     |
     |  Methods defined here:
     |
     |  __init__(self, master=None, value=None, name=None)
     |      Construct a boolean variable.
     |
     |      MASTER can be given as master widget.
     |      VALUE is an optional value (defaults to False)
     |      NAME is an optional Tcl name (defaults to PY_VARnum).
     |
     |      If NAME matches an existing variable and VALUE is omitted
     |      then the existing value is retained.
     |
     |  get(self)
     |      Return the value of the variable as a bool.
     |
     |  initialize = set(self, value)
     |
     |  set(self, value)
     |      Set the variable to VALUE.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Variable:
     |
     |  __del__(self)
     |      Unset the variable in Tcl.
     |
     |  __eq__(self, other)
     |      Return self==value.
     |
     |  __str__(self)
     |      Return the name of the variable in Tcl.
     |
     |  trace = trace_variable(self, mode, callback)
     |
     |  trace_add(self, mode, callback)
     |      Define a trace callback for the variable.
     |
     |      Mode is one of "read", "write", "unset", or a list or tuple of
     |      such strings.
     |      Callback must be a function which is called when the variable is
     |      read, written or unset.
     |
     |      Return the name of the callback.
     |
     |  trace_info(self)
     |      Return all trace callback information.
     |
     |  trace_remove(self, mode, cbname)
     |      Delete the trace callback for a variable.
     |
     |      Mode is one of "read", "write", "unset" or a list or tuple of
     |      such strings.  Must be same as were specified in trace_add().
     |      cbname is the name of the callback returned from trace_add().
     |
     |  trace_variable(self, mode, callback)
     |      Define a trace callback for the variable.
     |
     |      MODE is one of "r", "w", "u" for read, write, undefine.
     |      CALLBACK must be a function which is called when
     |      the variable is read, written or undefined.
     |
     |      Return the name of the callback.
     |
     |      This deprecated method wraps a deprecated Tcl method that will
     |      likely be removed in the future.  Use trace_add() instead.
     |
     |  trace_vdelete(self, mode, cbname)
     |      Delete the trace callback for a variable.
     |
     |      MODE is one of "r", "w", "u" for read, write, undefine.
     |      CBNAME is the name of the callback returned from trace_variable or trace.
     |
     |      This deprecated method wraps a deprecated Tcl method that will
     |      likely be removed in the future.  Use trace_remove() instead.
     |
     |  trace_vinfo(self)
     |      Return all trace callback information.
     |
     |      This deprecated method wraps a deprecated Tcl method that will
     |      likely be removed in the future.  Use trace_info() instead.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Variable:
     |
     |  __dict__
     |      dictionary for instance variables (if defined)
     |
     |  __weakref__
     |      list of weak references to the object (if defined)
     |
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Variable:
     |
     |  __hash__ = None

    class Button(Widget)
     |  Button(master=None, cnf={}, **kw)
     |
     |  Button widget.
     |
     |  Method resolution order:
     |      Button
     |      Widget
     |      BaseWidget
     |      Misc
     |      Pack
     |      Place
     |      Grid
     |      builtins.object
     |
     |  Methods defined here:
     |
     |  __init__(self, master=None, cnf={}, **kw)
     |      Construct a button widget with the parent MASTER.
     |
     |      STANDARD OPTIONS
     |
     |          activebackground, activeforeground, anchor,
     |          background, bitmap, borderwidth, cursor,
     |          disabledforeground, font, foreground
     |          highlightbackground, highlightcolor,
     |          highlightthickness, image, justify,
     |          padx, pady, relief, repeatdelay,
     |          repeatinterval, takefocus, text,
     |          textvariable, underline, wraplength
     |
     |      WIDGET-SPECIFIC OPTIONS
     |
     |          command, compound, default, height,
     |          overrelief, state, width
     |
     |  flash(self)
     |      Flash the button.
     |
     |      This is accomplished by redisplaying
     |      the button several times, alternating between active and
     |      normal colors. At the end of the flash the button is left
     |      in the same normal/active state as when the command was
     |      invoked. This command is ignored if the button's state is
     |      disabled.
     |
     |  invoke(self)
     |      Invoke the command associated with the button.
     |
     |      The return value is the return value from the command,
     |      or an empty string if there is no command associated with
     |      the button. This command is ignored if the button's state
     |      is disabled.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseWidget:
     |
     |  destroy(self)
     |      Destroy this and all descendants widgets.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |
     |  __getitem__ = cget(self, key)
     |
     |  __repr__(self)
     |      Return repr(self).
     |
     |  __setitem__(self, key, value)
     |
     |  __str__(self)
     |      Return the window path name of this widget.
     |
     |  after(self, ms, func=None, *args)
     |      Call function once after given time.
     |
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |
     |  after_cancel(self, id)
     |      Cancel scheduling of function identified with ID.
     |
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |
     |  after_idle(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |
     |  anchor = grid_anchor(self, anchor=None)
     |
     |  bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |
     |  bell(self, displayof=0)
     |      Ring a display's bell.
     |
     |  bind(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |
     |  bind_all(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |
     |  bind_class(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |
     |  bindtags(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |
     |  cget(self, key)
     |      Return the resource value for a KEY given as string.
     |
     |  clipboard_append(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |
     |  clipboard_clear(self, **kw)
     |      Clear the data in the Tk clipboard.
     |
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |
     |  clipboard_get(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |
     |      This command is equivalent to:
     |
     |      selection_get(CLIPBOARD)
     |
     |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
     |
     |  config = configure(self, cnf=None, **kw)
     |
     |  configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |
     |  deletecommand(self, name)
     |      Internal function.
     |
     |      Delete the Tcl command provided in NAME.
     |
     |  event_add(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |
     |  event_delete(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |
     |  event_generate(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |
     |  event_info(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |
     |  focus = focus_set(self)
     |
     |  focus_displayof(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |
     |      Return None if the application does not have the focus.
     |
     |  focus_force(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |
     |  focus_get(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |
     |  focus_lastfor(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |
     |  focus_set(self)
     |      Direct input focus to this widget.
     |
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |
     |  getboolean(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |
     |  getdouble(self, s)
     |
     |  getint(self, s)
     |
     |  getvar(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |
     |  grab_current(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |
     |  grab_release(self)
     |      Release grab for this widget if currently set.
     |
     |  grab_set(self)
     |      Set grab for this widget.
     |
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |
     |  grab_set_global(self)
     |      Set global grab for this widget.
     |
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |
     |  grab_status(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |
     |  grid_anchor(self, anchor=None)
     |      The anchor value controls how to place the grid within the
     |      master when no row/column has any weight.
     |
     |      The default anchor is nw.
     |
     |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |
     |  grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |
     |  grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |
     |  grid_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |
     |  grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |
     |  grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |
     |  grid_slaves(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  image_names(self)
     |      Return a list of all existing image names.
     |
     |  image_types(self)
     |      Return a list of all available image types (e.g. photo bitmap).
     |
     |  keys(self)
     |      Return a list of all resource names of this widget.
     |
     |  lift = tkraise(self, aboveThis=None)
     |
     |  lower(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |
     |  mainloop(self, n=0)
     |      Call the mainloop of Tk.
     |
     |  nametowidget(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |
     |  option_add(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |
     |  option_clear(self)
     |      Clear the option database.
     |
     |      It will be reloaded if option_add is called.
     |
     |  option_get(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |
     |      Values with higher priority override lower values.
     |
     |  option_readfile(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |
     |      An optional second parameter gives the numeric
     |      priority.
     |
     |  pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |
     |  pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  place_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  propagate = pack_propagate(self, flag=['_noarg_'])
     |
     |  quit(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |
     |  register = _register(self, func, subst=None, needcleanup=1)
     |
     |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
     |
     |  selection_clear(self, **kw)
     |      Clear the current X selection.
     |
     |  selection_get(self, **kw)
     |      Return the contents of the current X selection.
     |
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |
     |  selection_handle(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |
     |  selection_own(self, **kw)
     |      Become owner of X selection.
     |
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |
     |  selection_own_get(self, **kw)
     |      Return owner of X selection.
     |
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |
     |  send(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |
     |  setvar(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |
     |  size = grid_size(self)
     |
     |  slaves = pack_slaves(self)
     |
     |  tk_bisque(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |
     |  tk_focusFollowsMouse(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |
     |  tk_focusNext(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |
     |  tk_focusPrev(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |
     |  tk_setPalette(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |
     |  tk_strictMotif(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |
     |  tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |
     |  unbind(self, sequence, funcid=None)
     |      Unbind for this widget for event SEQUENCE  the
     |      function identified with FUNCID.
     |
     |  unbind_all(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |
     |  unbind_class(self, className, sequence)
     |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |
     |  update(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |
     |  update_idletasks(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |
     |  wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |
     |  wait_visibility(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |
     |      If no parameter is given self is used.
     |
     |  wait_window(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |
     |      If no parameter is given self is used.
     |
     |  waitvar = wait_variable(self, name='PY_VAR')
     |
     |  winfo_atom(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |
     |  winfo_atomname(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |
     |  winfo_cells(self)
     |      Return number of cells in the colormap for this widget.
     |
     |  winfo_children(self)
     |      Return a list of all widgets which are children of this widget.
     |
     |  winfo_class(self)
     |      Return window class name of this widget.
     |
     |  winfo_colormapfull(self)
     |      Return True if at the last color request the colormap was full.
     |
     |  winfo_containing(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |
     |  winfo_depth(self)
     |      Return the number of bits per pixel.
     |
     |  winfo_exists(self)
     |      Return true if this widget exists.
     |
     |  winfo_fpixels(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |
     |  winfo_geometry(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |
     |  winfo_height(self)
     |      Return height of this widget.
     |
     |  winfo_id(self)
     |      Return identifier ID for this widget.
     |
     |  winfo_interps(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |
     |  winfo_ismapped(self)
     |      Return true if this widget is mapped.
     |
     |  winfo_manager(self)
     |      Return the window manager name for this widget.
     |
     |  winfo_name(self)
     |      Return the name of this widget.
     |
     |  winfo_parent(self)
     |      Return the name of the parent of this widget.
     |
     |  winfo_pathname(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |
     |  winfo_pixels(self, number)
     |      Rounded integer value of winfo_fpixels.
     |
     |  winfo_pointerx(self)
     |      Return the x coordinate of the pointer on the root window.
     |
     |  winfo_pointerxy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |
     |  winfo_pointery(self)
     |      Return the y coordinate of the pointer on the root window.
     |
     |  winfo_reqheight(self)
     |      Return requested height of this widget.
     |
     |  winfo_reqwidth(self)
     |      Return requested width of this widget.
     |
     |  winfo_rgb(self, color)
     |      Return a tuple of integer RGB values in range(65536) for color in this widget.
     |
     |  winfo_rootx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |
     |  winfo_rooty(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |
     |  winfo_screen(self)
     |      Return the screen name of this widget.
     |
     |  winfo_screencells(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |
     |  winfo_screendepth(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |
     |  winfo_screenheight(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |
     |  winfo_screenmmheight(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |
     |  winfo_screenmmwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |
     |  winfo_screenvisual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |
     |  winfo_screenwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |
     |  winfo_server(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |
     |  winfo_toplevel(self)
     |      Return the toplevel widget of this widget.
     |
     |  winfo_viewable(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |
     |  winfo_visual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |
     |  winfo_visualid(self)
     |      Return the X identifier for the visual for this widget.
     |
     |  winfo_visualsavailable(self, includeids=False)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if includeids is true is given also the X identifier.
     |
     |  winfo_vrootheight(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |
     |  winfo_vrootwidth(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |
     |  winfo_vrootx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |
     |  winfo_vrooty(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |
     |  winfo_width(self)
     |      Return the width of this widget.
     |
     |  winfo_x(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |
     |  winfo_y(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Misc:
     |
     |  __dict__
     |      dictionary for instance variables (if defined)
     |
     |  __weakref__
     |      list of weak references to the object (if defined)
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Pack:
     |
     |  forget = pack_forget(self)
     |
     |  info = pack_info(self)
     |
     |  pack = pack_configure(self, cnf={}, **kw)
     |
     |  pack_configure(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |
     |  pack_forget(self)
     |      Unmap this widget and do not use it for the packing order.
     |
     |  pack_info(self)
     |      Return information about the packing options
     |      for this widget.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Place:
     |
     |  place = place_configure(self, cnf={}, **kw)
     |
     |  place_configure(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |
     |  place_forget(self)
     |      Unmap this widget.
     |
     |  place_info(self)
     |      Return information about the placing options
     |      for this widget.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Grid:
     |
     |  grid = grid_configure(self, cnf={}, **kw)
     |
     |  grid_configure(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |
     |  grid_forget(self)
     |      Unmap this widget.
     |
     |  grid_info(self)
     |      Return information about the options
     |      for positioning this widget in a grid.
     |
     |  grid_remove(self)
     |      Unmap this widget but remember the grid options.
     |
     |  location = grid_location(self, x, y)

    class CallWrapper(builtins.object)
     |  CallWrapper(func, subst, widget)
     |
     |  Internal class. Stores function to call when some user
     |  defined Tcl function is called e.g. after an event occurred.
     |
     |  Methods defined here:
     |
     |  __call__(self, *args)
     |      Apply first function SUBST to arguments, than FUNC.
     |
     |  __init__(self, func, subst, widget)
     |      Store FUNC, SUBST and WIDGET as members.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |
     |  __dict__
     |      dictionary for instance variables (if defined)
     |
     |  __weakref__
     |      list of weak references to the object (if defined)

    class Canvas(Widget, XView, YView)
     |  Canvas(master=None, cnf={}, **kw)
     |
     |  Canvas widget to display graphical elements like lines or text.
     |
     |  Method resolution order:
     |      Canvas
     |      Widget
     |      BaseWidget
     |      Misc
     |      Pack
     |      Place
     |      Grid
     |      XView
     |      YView
     |      builtins.object
     |
     |  Methods defined here:
     |
     |  __init__(self, master=None, cnf={}, **kw)
     |      Construct a canvas widget with the parent MASTER.
     |
     |      Valid resource names: background, bd, bg, borderwidth, closeenough,
     |      confine, cursor, height, highlightbackground, highlightcolor,
     |      highlightthickness, insertbackground, insertborderwidth,
     |      insertofftime, insertontime, insertwidth, offset, relief,
     |      scrollregion, selectbackground, selectborderwidth, selectforeground,
     |      state, takefocus, width, xscrollcommand, xscrollincrement,
     |      yscrollcommand, yscrollincrement.
     |
     |  addtag(self, *args)
     |      Internal function.
     |
     |  addtag_above(self, newtag, tagOrId)
     |      Add tag NEWTAG to all items above TAGORID.
     |
     |  addtag_all(self, newtag)
     |      Add tag NEWTAG to all items.
     |
     |  addtag_below(self, newtag, tagOrId)
     |      Add tag NEWTAG to all items below TAGORID.
     |
     |  addtag_closest(self, newtag, x, y, halo=None, start=None)
     |      Add tag NEWTAG to item which is closest to pixel at X, Y.
     |      If several match take the top-most.
     |      All items closer than HALO are considered overlapping (all are
     |      closests). If START is specified the next below this tag is taken.
     |
     |  addtag_enclosed(self, newtag, x1, y1, x2, y2)
     |      Add tag NEWTAG to all items in the rectangle defined
     |      by X1,Y1,X2,Y2.
     |
     |  addtag_overlapping(self, newtag, x1, y1, x2, y2)
     |      Add tag NEWTAG to all items which overlap the rectangle
     |      defined by X1,Y1,X2,Y2.
     |
     |  addtag_withtag(self, newtag, tagOrId)
     |      Add tag NEWTAG to all items with TAGORID.
     |
     |  bbox(self, *args)
     |      Return a tuple of X1,Y1,X2,Y2 coordinates for a rectangle
     |      which encloses all items with tags specified as arguments.
     |
     |  canvasx(self, screenx, gridspacing=None)
     |      Return the canvas x coordinate of pixel position SCREENX rounded
     |      to nearest multiple of GRIDSPACING units.
     |
     |  canvasy(self, screeny, gridspacing=None)
     |      Return the canvas y coordinate of pixel position SCREENY rounded
     |      to nearest multiple of GRIDSPACING units.
     |
     |  coords(self, *args)
     |      Return a list of coordinates for the item given in ARGS.
     |
     |  create_arc(self, *args, **kw)
     |      Create arc shaped region with coordinates x1,y1,x2,y2.
     |
     |  create_bitmap(self, *args, **kw)
     |      Create bitmap with coordinates x1,y1.
     |
     |  create_image(self, *args, **kw)
     |      Create image item with coordinates x1,y1.
     |
     |  create_line(self, *args, **kw)
     |      Create line with coordinates x1,y1,...,xn,yn.
     |
     |  create_oval(self, *args, **kw)
     |      Create oval with coordinates x1,y1,x2,y2.
     |
     |  create_polygon(self, *args, **kw)
     |      Create polygon with coordinates x1,y1,...,xn,yn.
     |
     |  create_rectangle(self, *args, **kw)
     |      Create rectangle with coordinates x1,y1,x2,y2.
     |
     |  create_text(self, *args, **kw)
     |      Create text with coordinates x1,y1.
     |
     |  create_window(self, *args, **kw)
     |      Create window with coordinates x1,y1,x2,y2.
     |
     |  dchars(self, *args)
     |      Delete characters of text items identified by tag or id in ARGS (possibly
     |      several times) from FIRST to LAST character (including).
     |
     |  delete(self, *args)
     |      Delete items identified by all tag or ids contained in ARGS.
     |
     |  dtag(self, *args)
     |      Delete tag or id given as last arguments in ARGS from items
     |      identified by first argument in ARGS.
     |
     |  find(self, *args)
     |      Internal function.
     |
     |  find_above(self, tagOrId)
     |      Return items above TAGORID.
     |
     |  find_all(self)
     |      Return all items.
     |
     |  find_below(self, tagOrId)
     |      Return all items below TAGORID.
     |
     |  find_closest(self, x, y, halo=None, start=None)
     |      Return item which is closest to pixel at X, Y.
     |      If several match take the top-most.
     |      All items closer than HALO are considered overlapping (all are
     |      closest). If START is specified the next below this tag is taken.
     |
     |  find_enclosed(self, x1, y1, x2, y2)
     |      Return all items in rectangle defined
     |      by X1,Y1,X2,Y2.
     |
     |  find_overlapping(self, x1, y1, x2, y2)
     |      Return all items which overlap the rectangle
     |      defined by X1,Y1,X2,Y2.
     |
     |  find_withtag(self, tagOrId)
     |      Return all items with TAGORID.
     |
     |  focus(self, *args)
     |      Set focus to the first item specified in ARGS.
     |
     |  gettags(self, *args)
     |      Return tags associated with the first item specified in ARGS.
     |
     |  icursor(self, *args)
     |      Set cursor at position POS in the item identified by TAGORID.
     |      In ARGS TAGORID must be first.
     |
     |  index(self, *args)
     |      Return position of cursor as integer in item specified in ARGS.
     |
     |  insert(self, *args)
     |      Insert TEXT in item TAGORID at position POS. ARGS must
     |      be TAGORID POS TEXT.
     |
     |  itemcget(self, tagOrId, option)
     |      Return the resource value for an OPTION for item TAGORID.
     |
     |  itemconfig = itemconfigure(self, tagOrId, cnf=None, **kw)
     |
     |  itemconfigure(self, tagOrId, cnf=None, **kw)
     |      Configure resources of an item TAGORID.
     |
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method without arguments.
     |
     |  lift = tag_raise(self, *args)
     |
     |  lower = tag_lower(self, *args)
     |
     |  move(self, *args)
     |      Move an item TAGORID given in ARGS.
     |
     |  moveto(self, tagOrId, x='', y='')
     |      Move the items given by TAGORID in the canvas coordinate
     |      space so that the first coordinate pair of the bottommost
     |      item with tag TAGORID is located at position (X,Y).
     |      X and Y may be the empty string, in which case the
     |      corresponding coordinate will be unchanged. All items matching
     |      TAGORID remain in the same positions relative to each other.
     |
     |  postscript(self, cnf={}, **kw)
     |      Print the contents of the canvas to a postscript
     |      file. Valid options: colormap, colormode, file, fontmap,
     |      height, pageanchor, pageheight, pagewidth, pagex, pagey,
     |      rotate, width, x, y.
     |
     |  scale(self, *args)
     |      Scale item TAGORID with XORIGIN, YORIGIN, XSCALE, YSCALE.
     |
     |  scan_dragto(self, x, y, gain=10)
     |      Adjust the view of the canvas to GAIN times the
     |      difference between X and Y and the coordinates given in
     |      scan_mark.
     |
     |  scan_mark(self, x, y)
     |      Remember the current X, Y coordinates.
     |
     |  select_adjust(self, tagOrId, index)
     |      Adjust the end of the selection near the cursor of an item TAGORID to index.
     |
     |  select_clear(self)
     |      Clear the selection if it is in this widget.
     |
     |  select_from(self, tagOrId, index)
     |      Set the fixed end of a selection in item TAGORID to INDEX.
     |
     |  select_item(self)
     |      Return the item which has the selection.
     |
     |  select_to(self, tagOrId, index)
     |      Set the variable end of a selection in item TAGORID to INDEX.
     |
     |  tag_bind(self, tagOrId, sequence=None, func=None, add=None)
     |      Bind to all items with TAGORID at event SEQUENCE a call to function FUNC.
     |
     |      An additional boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or whether it will
     |      replace the previous function. See bind for the return value.
     |
     |  tag_lower(self, *args)
     |      Lower an item TAGORID given in ARGS
     |      (optional below another item).
     |
     |  tag_raise(self, *args)
     |      Raise an item TAGORID given in ARGS
     |      (optional above another item).
     |
     |  tag_unbind(self, tagOrId, sequence, funcid=None)
     |      Unbind for all items with TAGORID for event SEQUENCE  the
     |      function identified with FUNCID.
     |
     |  tkraise = tag_raise(self, *args)
     |
     |  type(self, tagOrId)
     |      Return the type of the item TAGORID.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseWidget:
     |
     |  destroy(self)
     |      Destroy this and all descendants widgets.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |
     |  __getitem__ = cget(self, key)
     |
     |  __repr__(self)
     |      Return repr(self).
     |
     |  __setitem__(self, key, value)
     |
     |  __str__(self)
     |      Return the window path name of this widget.
     |
     |  after(self, ms, func=None, *args)
     |      Call function once after given time.
     |
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |
     |  after_cancel(self, id)
     |      Cancel scheduling of function identified with ID.
     |
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |
     |  after_idle(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |
     |  anchor = grid_anchor(self, anchor=None)
     |
     |  bell(self, displayof=0)
     |      Ring a display's bell.
     |
     |  bind(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |
     |  bind_all(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |
     |  bind_class(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |
     |  bindtags(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |
     |  cget(self, key)
     |      Return the resource value for a KEY given as string.
     |
     |  clipboard_append(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |
     |  clipboard_clear(self, **kw)
     |      Clear the data in the Tk clipboard.
     |
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |
     |  clipboard_get(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |
     |      This command is equivalent to:
     |
     |      selection_get(CLIPBOARD)
     |
     |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
     |
     |  config = configure(self, cnf=None, **kw)
     |
     |  configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |
     |  deletecommand(self, name)
     |      Internal function.
     |
     |      Delete the Tcl command provided in NAME.
     |
     |  event_add(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |
     |  event_delete(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |
     |  event_generate(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |
     |  event_info(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |
     |  focus_displayof(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |
     |      Return None if the application does not have the focus.
     |
     |  focus_force(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |
     |  focus_get(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |
     |  focus_lastfor(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |
     |  focus_set(self)
     |      Direct input focus to this widget.
     |
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |
     |  getboolean(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |
     |  getdouble(self, s)
     |
     |  getint(self, s)
     |
     |  getvar(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |
     |  grab_current(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |
     |  grab_release(self)
     |      Release grab for this widget if currently set.
     |
     |  grab_set(self)
     |      Set grab for this widget.
     |
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |
     |  grab_set_global(self)
     |      Set global grab for this widget.
     |
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |
     |  grab_status(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |
     |  grid_anchor(self, anchor=None)
     |      The anchor value controls how to place the grid within the
     |      master when no row/column has any weight.
     |
     |      The default anchor is nw.
     |
     |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |
     |  grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |
     |  grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |
     |  grid_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |
     |  grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |
     |  grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |
     |  grid_slaves(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  image_names(self)
     |      Return a list of all existing image names.
     |
     |  image_types(self)
     |      Return a list of all available image types (e.g. photo bitmap).
     |
     |  keys(self)
     |      Return a list of all resource names of this widget.
     |
     |  mainloop(self, n=0)
     |      Call the mainloop of Tk.
     |
     |  nametowidget(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |
     |  option_add(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |
     |  option_clear(self)
     |      Clear the option database.
     |
     |      It will be reloaded if option_add is called.
     |
     |  option_get(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |
     |      Values with higher priority override lower values.
     |
     |  option_readfile(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |
     |      An optional second parameter gives the numeric
     |      priority.
     |
     |  pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |
     |  pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  place_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  propagate = pack_propagate(self, flag=['_noarg_'])
     |
     |  quit(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |
     |  register = _register(self, func, subst=None, needcleanup=1)
     |
     |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
     |
     |  selection_clear(self, **kw)
     |      Clear the current X selection.
     |
     |  selection_get(self, **kw)
     |      Return the contents of the current X selection.
     |
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |
     |  selection_handle(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |
     |  selection_own(self, **kw)
     |      Become owner of X selection.
     |
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |
     |  selection_own_get(self, **kw)
     |      Return owner of X selection.
     |
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |
     |  send(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |
     |  setvar(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |
     |  size = grid_size(self)
     |
     |  slaves = pack_slaves(self)
     |
     |  tk_bisque(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |
     |  tk_focusFollowsMouse(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |
     |  tk_focusNext(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |
     |  tk_focusPrev(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |
     |  tk_setPalette(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |
     |  tk_strictMotif(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |
     |  unbind(self, sequence, funcid=None)
     |      Unbind for this widget for event SEQUENCE  the
     |      function identified with FUNCID.
     |
     |  unbind_all(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |
     |  unbind_class(self, className, sequence)
     |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |
     |  update(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |
     |  update_idletasks(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |
     |  wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |
     |  wait_visibility(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |
     |      If no parameter is given self is used.
     |
     |  wait_window(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |
     |      If no parameter is given self is used.
     |
     |  waitvar = wait_variable(self, name='PY_VAR')
     |
     |  winfo_atom(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |
     |  winfo_atomname(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |
     |  winfo_cells(self)
     |      Return number of cells in the colormap for this widget.
     |
     |  winfo_children(self)
     |      Return a list of all widgets which are children of this widget.
     |
     |  winfo_class(self)
     |      Return window class name of this widget.
     |
     |  winfo_colormapfull(self)
     |      Return True if at the last color request the colormap was full.
     |
     |  winfo_containing(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |
     |  winfo_depth(self)
     |      Return the number of bits per pixel.
     |
     |  winfo_exists(self)
     |      Return true if this widget exists.
     |
     |  winfo_fpixels(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |
     |  winfo_geometry(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |
     |  winfo_height(self)
     |      Return height of this widget.
     |
     |  winfo_id(self)
     |      Return identifier ID for this widget.
     |
     |  winfo_interps(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |
     |  winfo_ismapped(self)
     |      Return true if this widget is mapped.
     |
     |  winfo_manager(self)
     |      Return the window manager name for this widget.
     |
     |  winfo_name(self)
     |      Return the name of this widget.
     |
     |  winfo_parent(self)
     |      Return the name of the parent of this widget.
     |
     |  winfo_pathname(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |
     |  winfo_pixels(self, number)
     |      Rounded integer value of winfo_fpixels.
     |
     |  winfo_pointerx(self)
     |      Return the x coordinate of the pointer on the root window.
     |
     |  winfo_pointerxy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |
     |  winfo_pointery(self)
     |      Return the y coordinate of the pointer on the root window.
     |
     |  winfo_reqheight(self)
     |      Return requested height of this widget.
     |
     |  winfo_reqwidth(self)
     |      Return requested width of this widget.
     |
     |  winfo_rgb(self, color)
     |      Return a tuple of integer RGB values in range(65536) for color in this widget.
     |
     |  winfo_rootx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |
     |  winfo_rooty(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |
     |  winfo_screen(self)
     |      Return the screen name of this widget.
     |
     |  winfo_screencells(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |
     |  winfo_screendepth(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |
     |  winfo_screenheight(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |
     |  winfo_screenmmheight(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |
     |  winfo_screenmmwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |
     |  winfo_screenvisual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |
     |  winfo_screenwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |
     |  winfo_server(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |
     |  winfo_toplevel(self)
     |      Return the toplevel widget of this widget.
     |
     |  winfo_viewable(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |
     |  winfo_visual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |
     |  winfo_visualid(self)
     |      Return the X identifier for the visual for this widget.
     |
     |  winfo_visualsavailable(self, includeids=False)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if includeids is true is given also the X identifier.
     |
     |  winfo_vrootheight(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |
     |  winfo_vrootwidth(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |
     |  winfo_vrootx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |
     |  winfo_vrooty(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |
     |  winfo_width(self)
     |      Return the width of this widget.
     |
     |  winfo_x(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |
     |  winfo_y(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Misc:
     |
     |  __dict__
     |      dictionary for instance variables (if defined)
     |
     |  __weakref__
     |      list of weak references to the object (if defined)
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Pack:
     |
     |  forget = pack_forget(self)
     |
     |  info = pack_info(self)
     |
     |  pack = pack_configure(self, cnf={}, **kw)
     |
     |  pack_configure(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |
     |  pack_forget(self)
     |      Unmap this widget and do not use it for the packing order.
     |
     |  pack_info(self)
     |      Return information about the packing options
     |      for this widget.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Place:
     |
     |  place = place_configure(self, cnf={}, **kw)
     |
     |  place_configure(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |
     |  place_forget(self)
     |      Unmap this widget.
     |
     |  place_info(self)
     |      Return information about the placing options
     |      for this widget.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Grid:
     |
     |  grid = grid_configure(self, cnf={}, **kw)
     |
     |  grid_configure(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |
     |  grid_forget(self)
     |      Unmap this widget.
     |
     |  grid_info(self)
     |      Return information about the options
     |      for positioning this widget in a grid.
     |
     |  grid_remove(self)
     |      Unmap this widget but remember the grid options.
     |
     |  location = grid_location(self, x, y)
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from XView:
     |
     |  xview(self, *args)
     |      Query and change the horizontal position of the view.
     |
     |  xview_moveto(self, fraction)
     |      Adjusts the view in the window so that FRACTION of the
     |      total width of the canvas is off-screen to the left.
     |
     |  xview_scroll(self, number, what)
     |      Shift the x-view according to NUMBER which is measured in "units"
     |      or "pages" (WHAT).
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from YView:
     |
     |  yview(self, *args)
     |      Query and change the vertical position of the view.
     |
     |  yview_moveto(self, fraction)
     |      Adjusts the view in the window so that FRACTION of the
     |      total height of the canvas is off-screen to the top.
     |
     |  yview_scroll(self, number, what)
     |      Shift the y-view according to NUMBER which is measured in
     |      "units" or "pages" (WHAT).

    class Checkbutton(Widget)
     |  Checkbutton(master=None, cnf={}, **kw)
     |
     |  Checkbutton widget which is either in on- or off-state.
     |
     |  Method resolution order:
     |      Checkbutton
     |      Widget
     |      BaseWidget
     |      Misc
     |      Pack
     |      Place
     |      Grid
     |      builtins.object
     |
     |  Methods defined here:
     |
     |  __init__(self, master=None, cnf={}, **kw)
     |      Construct a checkbutton widget with the parent MASTER.
     |
     |      Valid resource names: activebackground, activeforeground, anchor,
     |      background, bd, bg, bitmap, borderwidth, command, cursor,
     |      disabledforeground, fg, font, foreground, height,
     |      highlightbackground, highlightcolor, highlightthickness, image,
     |      indicatoron, justify, offvalue, onvalue, padx, pady, relief,
     |      selectcolor, selectimage, state, takefocus, text, textvariable,
     |      underline, variable, width, wraplength.
     |
     |  deselect(self)
     |      Put the button in off-state.
     |
     |  flash(self)
     |      Flash the button.
     |
     |  invoke(self)
     |      Toggle the button and invoke a command if given as resource.
     |
     |  select(self)
     |      Put the button in on-state.
     |
     |  toggle(self)
     |      Toggle the button.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseWidget:
     |
     |  destroy(self)
     |      Destroy this and all descendants widgets.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |
     |  __getitem__ = cget(self, key)
     |
     |  __repr__(self)
     |      Return repr(self).
     |
     |  __setitem__(self, key, value)
     |
     |  __str__(self)
     |      Return the window path name of this widget.
     |
     |  after(self, ms, func=None, *args)
     |      Call function once after given time.
     |
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |
     |  after_cancel(self, id)
     |      Cancel scheduling of function identified with ID.
     |
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |
     |  after_idle(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |
     |  anchor = grid_anchor(self, anchor=None)
     |
     |  bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |
     |  bell(self, displayof=0)
     |      Ring a display's bell.
     |
     |  bind(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |
     |  bind_all(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |
     |  bind_class(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |
     |  bindtags(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |
     |  cget(self, key)
     |      Return the resource value for a KEY given as string.
     |
     |  clipboard_append(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |
     |  clipboard_clear(self, **kw)
     |      Clear the data in the Tk clipboard.
     |
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |
     |  clipboard_get(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |
     |      This command is equivalent to:
     |
     |      selection_get(CLIPBOARD)
     |
     |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
     |
     |  config = configure(self, cnf=None, **kw)
     |
     |  configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |
     |  deletecommand(self, name)
     |      Internal function.
     |
     |      Delete the Tcl command provided in NAME.
     |
     |  event_add(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |
     |  event_delete(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |
     |  event_generate(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |
     |  event_info(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |
     |  focus = focus_set(self)
     |
     |  focus_displayof(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |
     |      Return None if the application does not have the focus.
     |
     |  focus_force(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |
     |  focus_get(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |
     |  focus_lastfor(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |
     |  focus_set(self)
     |      Direct input focus to this widget.
     |
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |
     |  getboolean(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |
     |  getdouble(self, s)
     |
     |  getint(self, s)
     |
     |  getvar(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |
     |  grab_current(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |
     |  grab_release(self)
     |      Release grab for this widget if currently set.
     |
     |  grab_set(self)
     |      Set grab for this widget.
     |
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |
     |  grab_set_global(self)
     |      Set global grab for this widget.
     |
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |
     |  grab_status(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |
     |  grid_anchor(self, anchor=None)
     |      The anchor value controls how to place the grid within the
     |      master when no row/column has any weight.
     |
     |      The default anchor is nw.
     |
     |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |
     |  grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |
     |  grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |
     |  grid_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |
     |  grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |
     |  grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |
     |  grid_slaves(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  image_names(self)
     |      Return a list of all existing image names.
     |
     |  image_types(self)
     |      Return a list of all available image types (e.g. photo bitmap).
     |
     |  keys(self)
     |      Return a list of all resource names of this widget.
     |
     |  lift = tkraise(self, aboveThis=None)
     |
     |  lower(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |
     |  mainloop(self, n=0)
     |      Call the mainloop of Tk.
     |
     |  nametowidget(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |
     |  option_add(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |
     |  option_clear(self)
     |      Clear the option database.
     |
     |      It will be reloaded if option_add is called.
     |
     |  option_get(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |
     |      Values with higher priority override lower values.
     |
     |  option_readfile(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |
     |      An optional second parameter gives the numeric
     |      priority.
     |
     |  pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |
     |  pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  place_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  propagate = pack_propagate(self, flag=['_noarg_'])
     |
     |  quit(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |
     |  register = _register(self, func, subst=None, needcleanup=1)
     |
     |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
     |
     |  selection_clear(self, **kw)
     |      Clear the current X selection.
     |
     |  selection_get(self, **kw)
     |      Return the contents of the current X selection.
     |
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |
     |  selection_handle(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |
     |  selection_own(self, **kw)
     |      Become owner of X selection.
     |
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |
     |  selection_own_get(self, **kw)
     |      Return owner of X selection.
     |
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |
     |  send(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |
     |  setvar(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |
     |  size = grid_size(self)
     |
     |  slaves = pack_slaves(self)
     |
     |  tk_bisque(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |
     |  tk_focusFollowsMouse(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |
     |  tk_focusNext(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |
     |  tk_focusPrev(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |
     |  tk_setPalette(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |
     |  tk_strictMotif(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |
     |  tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |
     |  unbind(self, sequence, funcid=None)
     |      Unbind for this widget for event SEQUENCE  the
     |      function identified with FUNCID.
     |
     |  unbind_all(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |
     |  unbind_class(self, className, sequence)
     |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |
     |  update(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |
     |  update_idletasks(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |
     |  wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |
     |  wait_visibility(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |
     |      If no parameter is given self is used.
     |
     |  wait_window(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |
     |      If no parameter is given self is used.
     |
     |  waitvar = wait_variable(self, name='PY_VAR')
     |
     |  winfo_atom(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |
     |  winfo_atomname(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |
     |  winfo_cells(self)
     |      Return number of cells in the colormap for this widget.
     |
     |  winfo_children(self)
     |      Return a list of all widgets which are children of this widget.
     |
     |  winfo_class(self)
     |      Return window class name of this widget.
     |
     |  winfo_colormapfull(self)
     |      Return True if at the last color request the colormap was full.
     |
     |  winfo_containing(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |
     |  winfo_depth(self)
     |      Return the number of bits per pixel.
     |
     |  winfo_exists(self)
     |      Return true if this widget exists.
     |
     |  winfo_fpixels(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |
     |  winfo_geometry(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |
     |  winfo_height(self)
     |      Return height of this widget.
     |
     |  winfo_id(self)
     |      Return identifier ID for this widget.
     |
     |  winfo_interps(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |
     |  winfo_ismapped(self)
     |      Return true if this widget is mapped.
     |
     |  winfo_manager(self)
     |      Return the window manager name for this widget.
     |
     |  winfo_name(self)
     |      Return the name of this widget.
     |
     |  winfo_parent(self)
     |      Return the name of the parent of this widget.
     |
     |  winfo_pathname(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |
     |  winfo_pixels(self, number)
     |      Rounded integer value of winfo_fpixels.
     |
     |  winfo_pointerx(self)
     |      Return the x coordinate of the pointer on the root window.
     |
     |  winfo_pointerxy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |
     |  winfo_pointery(self)
     |      Return the y coordinate of the pointer on the root window.
     |
     |  winfo_reqheight(self)
     |      Return requested height of this widget.
     |
     |  winfo_reqwidth(self)
     |      Return requested width of this widget.
     |
     |  winfo_rgb(self, color)
     |      Return a tuple of integer RGB values in range(65536) for color in this widget.
     |
     |  winfo_rootx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |
     |  winfo_rooty(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |
     |  winfo_screen(self)
     |      Return the screen name of this widget.
     |
     |  winfo_screencells(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |
     |  winfo_screendepth(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |
     |  winfo_screenheight(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |
     |  winfo_screenmmheight(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |
     |  winfo_screenmmwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |
     |  winfo_screenvisual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |
     |  winfo_screenwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |
     |  winfo_server(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |
     |  winfo_toplevel(self)
     |      Return the toplevel widget of this widget.
     |
     |  winfo_viewable(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |
     |  winfo_visual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |
     |  winfo_visualid(self)
     |      Return the X identifier for the visual for this widget.
     |
     |  winfo_visualsavailable(self, includeids=False)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if includeids is true is given also the X identifier.
     |
     |  winfo_vrootheight(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |
     |  winfo_vrootwidth(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |
     |  winfo_vrootx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |
     |  winfo_vrooty(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |
     |  winfo_width(self)
     |      Return the width of this widget.
     |
     |  winfo_x(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |
     |  winfo_y(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Misc:
     |
     |  __dict__
     |      dictionary for instance variables (if defined)
     |
     |  __weakref__
     |      list of weak references to the object (if defined)
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Pack:
     |
     |  forget = pack_forget(self)
     |
     |  info = pack_info(self)
     |
     |  pack = pack_configure(self, cnf={}, **kw)
     |
     |  pack_configure(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |
     |  pack_forget(self)
     |      Unmap this widget and do not use it for the packing order.
     |
     |  pack_info(self)
     |      Return information about the packing options
     |      for this widget.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Place:
     |
     |  place = place_configure(self, cnf={}, **kw)
     |
     |  place_configure(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |
     |  place_forget(self)
     |      Unmap this widget.
     |
     |  place_info(self)
     |      Return information about the placing options
     |      for this widget.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Grid:
     |
     |  grid = grid_configure(self, cnf={}, **kw)
     |
     |  grid_configure(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |
     |  grid_forget(self)
     |      Unmap this widget.
     |
     |  grid_info(self)
     |      Return information about the options
     |      for positioning this widget in a grid.
     |
     |  grid_remove(self)
     |      Unmap this widget but remember the grid options.
     |
     |  location = grid_location(self, x, y)

    class DoubleVar(Variable)
     |  DoubleVar(master=None, value=None, name=None)
     |
     |  Value holder for float variables.
     |
     |  Method resolution order:
     |      DoubleVar
     |      Variable
     |      builtins.object
     |
     |  Methods defined here:
     |
     |  __init__(self, master=None, value=None, name=None)
     |      Construct a float variable.
     |
     |      MASTER can be given as master widget.
     |      VALUE is an optional value (defaults to 0.0)
     |      NAME is an optional Tcl name (defaults to PY_VARnum).
     |
     |      If NAME matches an existing variable and VALUE is omitted
     |      then the existing value is retained.
     |
     |  get(self)
     |      Return the value of the variable as a float.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Variable:
     |
     |  __del__(self)
     |      Unset the variable in Tcl.
     |
     |  __eq__(self, other)
     |      Return self==value.
     |
     |  __str__(self)
     |      Return the name of the variable in Tcl.
     |
     |  initialize = set(self, value)
     |
     |  set(self, value)
     |      Set the variable to VALUE.
     |
     |  trace = trace_variable(self, mode, callback)
     |
     |  trace_add(self, mode, callback)
     |      Define a trace callback for the variable.
     |
     |      Mode is one of "read", "write", "unset", or a list or tuple of
     |      such strings.
     |      Callback must be a function which is called when the variable is
     |      read, written or unset.
     |
     |      Return the name of the callback.
     |
     |  trace_info(self)
     |      Return all trace callback information.
     |
     |  trace_remove(self, mode, cbname)
     |      Delete the trace callback for a variable.
     |
     |      Mode is one of "read", "write", "unset" or a list or tuple of
     |      such strings.  Must be same as were specified in trace_add().
     |      cbname is the name of the callback returned from trace_add().
     |
     |  trace_variable(self, mode, callback)
     |      Define a trace callback for the variable.
     |
     |      MODE is one of "r", "w", "u" for read, write, undefine.
     |      CALLBACK must be a function which is called when
     |      the variable is read, written or undefined.
     |
     |      Return the name of the callback.
     |
     |      This deprecated method wraps a deprecated Tcl method that will
     |      likely be removed in the future.  Use trace_add() instead.
     |
     |  trace_vdelete(self, mode, cbname)
     |      Delete the trace callback for a variable.
     |
     |      MODE is one of "r", "w", "u" for read, write, undefine.
     |      CBNAME is the name of the callback returned from trace_variable or trace.
     |
     |      This deprecated method wraps a deprecated Tcl method that will
     |      likely be removed in the future.  Use trace_remove() instead.
     |
     |  trace_vinfo(self)
     |      Return all trace callback information.
     |
     |      This deprecated method wraps a deprecated Tcl method that will
     |      likely be removed in the future.  Use trace_info() instead.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Variable:
     |
     |  __dict__
     |      dictionary for instance variables (if defined)
     |
     |  __weakref__
     |      list of weak references to the object (if defined)
     |
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Variable:
     |
     |  __hash__ = None

    class Entry(Widget, XView)
     |  Entry(master=None, cnf={}, **kw)
     |
     |  Entry widget which allows displaying simple text.
     |
     |  Method resolution order:
     |      Entry
     |      Widget
     |      BaseWidget
     |      Misc
     |      Pack
     |      Place
     |      Grid
     |      XView
     |      builtins.object
     |
     |  Methods defined here:
     |
     |  __init__(self, master=None, cnf={}, **kw)
     |      Construct an entry widget with the parent MASTER.
     |
     |      Valid resource names: background, bd, bg, borderwidth, cursor,
     |      exportselection, fg, font, foreground, highlightbackground,
     |      highlightcolor, highlightthickness, insertbackground,
     |      insertborderwidth, insertofftime, insertontime, insertwidth,
     |      invalidcommand, invcmd, justify, relief, selectbackground,
     |      selectborderwidth, selectforeground, show, state, takefocus,
     |      textvariable, validate, validatecommand, vcmd, width,
     |      xscrollcommand.
     |
     |  delete(self, first, last=None)
     |      Delete text from FIRST to LAST (not included).
     |
     |  get(self)
     |      Return the text.
     |
     |  icursor(self, index)
     |      Insert cursor at INDEX.
     |
     |  index(self, index)
     |      Return position of cursor.
     |
     |  insert(self, index, string)
     |      Insert STRING at INDEX.
     |
     |  scan_dragto(self, x)
     |      Adjust the view of the canvas to 10 times the
     |      difference between X and Y and the coordinates given in
     |      scan_mark.
     |
     |  scan_mark(self, x)
     |      Remember the current X, Y coordinates.
     |
     |  select_adjust = selection_adjust(self, index)
     |
     |  select_clear = selection_clear(self)
     |
     |  select_from = selection_from(self, index)
     |
     |  select_present = selection_present(self)
     |
     |  select_range = selection_range(self, start, end)
     |
     |  select_to = selection_to(self, index)
     |
     |  selection_adjust(self, index)
     |      Adjust the end of the selection near the cursor to INDEX.
     |
     |  selection_clear(self)
     |      Clear the selection if it is in this widget.
     |
     |  selection_from(self, index)
     |      Set the fixed end of a selection to INDEX.
     |
     |  selection_present(self)
     |      Return True if there are characters selected in the entry, False
     |      otherwise.
     |
     |  selection_range(self, start, end)
     |      Set the selection from START to END (not included).
     |
     |  selection_to(self, index)
     |      Set the variable end of a selection to INDEX.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseWidget:
     |
     |  destroy(self)
     |      Destroy this and all descendants widgets.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |
     |  __getitem__ = cget(self, key)
     |
     |  __repr__(self)
     |      Return repr(self).
     |
     |  __setitem__(self, key, value)
     |
     |  __str__(self)
     |      Return the window path name of this widget.
     |
     |  after(self, ms, func=None, *args)
     |      Call function once after given time.
     |
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |
     |  after_cancel(self, id)
     |      Cancel scheduling of function identified with ID.
     |
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |
     |  after_idle(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |
     |  anchor = grid_anchor(self, anchor=None)
     |
     |  bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |
     |  bell(self, displayof=0)
     |      Ring a display's bell.
     |
     |  bind(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |
     |  bind_all(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |
     |  bind_class(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |
     |  bindtags(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |
     |  cget(self, key)
     |      Return the resource value for a KEY given as string.
     |
     |  clipboard_append(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |
     |  clipboard_clear(self, **kw)
     |      Clear the data in the Tk clipboard.
     |
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |
     |  clipboard_get(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |
     |      This command is equivalent to:
     |
     |      selection_get(CLIPBOARD)
     |
     |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
     |
     |  config = configure(self, cnf=None, **kw)
     |
     |  configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |
     |  deletecommand(self, name)
     |      Internal function.
     |
     |      Delete the Tcl command provided in NAME.
     |
     |  event_add(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |
     |  event_delete(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |
     |  event_generate(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |
     |  event_info(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |
     |  focus = focus_set(self)
     |
     |  focus_displayof(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |
     |      Return None if the application does not have the focus.
     |
     |  focus_force(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |
     |  focus_get(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |
     |  focus_lastfor(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |
     |  focus_set(self)
     |      Direct input focus to this widget.
     |
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |
     |  getboolean(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |
     |  getdouble(self, s)
     |
     |  getint(self, s)
     |
     |  getvar(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |
     |  grab_current(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |
     |  grab_release(self)
     |      Release grab for this widget if currently set.
     |
     |  grab_set(self)
     |      Set grab for this widget.
     |
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |
     |  grab_set_global(self)
     |      Set global grab for this widget.
     |
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |
     |  grab_status(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |
     |  grid_anchor(self, anchor=None)
     |      The anchor value controls how to place the grid within the
     |      master when no row/column has any weight.
     |
     |      The default anchor is nw.
     |
     |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |
     |  grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |
     |  grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |
     |  grid_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |
     |  grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |
     |  grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |
     |  grid_slaves(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  image_names(self)
     |      Return a list of all existing image names.
     |
     |  image_types(self)
     |      Return a list of all available image types (e.g. photo bitmap).
     |
     |  keys(self)
     |      Return a list of all resource names of this widget.
     |
     |  lift = tkraise(self, aboveThis=None)
     |
     |  lower(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |
     |  mainloop(self, n=0)
     |      Call the mainloop of Tk.
     |
     |  nametowidget(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |
     |  option_add(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |
     |  option_clear(self)
     |      Clear the option database.
     |
     |      It will be reloaded if option_add is called.
     |
     |  option_get(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |
     |      Values with higher priority override lower values.
     |
     |  option_readfile(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |
     |      An optional second parameter gives the numeric
     |      priority.
     |
     |  pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |
     |  pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  place_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |
     |  propagate = pack_propagate(self, flag=['_noarg_'])
     |
     |  quit(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |
     |  register = _register(self, func, subst=None, needcleanup=1)
     |
     |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
     |
     |  selection_get(self, **kw)
     |      Return the contents of the current X selection.
     |
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |
     |  selection_handle(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |
     |  selection_own(self, **kw)
     |      Become owner of X selection.
     |
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |
     |  selection_own_get(self, **kw)
     |      Return owner of X selection.
     |
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |
     |  send(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |
     |  setvar(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |
     |  size = grid_size(self)
     |
     |  slaves = pack_slaves(self)
     |
     |  tk_bisque(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |
     |  tk_focusFollowsMouse(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |
     |  tk_focusNext(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |
     |  tk_focusPrev(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |
     |  tk_setPalette(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |
     |  tk_strictMotif(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |
     |  tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |
     |  unbind(self, sequence, funcid=None)
     |      Unbind for this widget for event SEQUENCE  the
     |      function identified with FUNCID.
     |
     |  unbind_all(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |
     |  unbind_class(self, className, sequence)
     |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |
     |  update(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |
     |  update_idletasks(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |
     |  wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |
     |  wait_visibility(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |
     |      If no parameter is given self is used.
     |
     |  wait_window(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |
     |      If no parameter is given self is used.
     |
     |  waitvar = wait_variable(self, name='PY_VAR')
     |
     |  winfo_atom(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |
     |  winfo_atomname(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |
     |  winfo_cells(self)
     |      Return number of cells in the colormap for this widget.
     |
     |  winfo_children(self)
     |      Return a list of all widgets which are children of this widget.
     |
     |  winfo_class(self)
     |      Return window class name of this widget.
     |
     |  winfo_colormapfull(self)
     |      Return True if at the last color request the colormap was full.
     |
     |  winfo_containing(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |
     |  winfo_depth(self)
     |      Return the number of bits per pixel.
     |
     |  winfo_exists(self)
     |      Return true if this widget exists.
     |
     |  winfo_fpixels(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |
     |  winfo_geometry(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |
     |  winfo_height(self)
     |      Return height of this widget.
     |
     |  winfo_id(self)
     |      Return identifier ID for this widget.
     |
     |  winfo_interps(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |
     |  winfo_ismapped(self)
     |      Return true if this widget is mapped.
     |
     |  winfo_manager(self)
     |      Return the window manager name for this widget.
     |
     |  winfo_name(self)
     |      Return the name of this widget.
     |
     |  winfo_parent(self)
     |      Return the name of the parent of this widget.
     |
     |  winfo_pathname(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |
     |  winfo_pixels(self, number)
     |      Rounded integer value of winfo_fpixels.
     |
     |  winfo_pointerx(self)
     |      Return the x coordinate of the pointer on the root window.
     |
     |  winfo_pointerxy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |
     |  winfo_pointery(self)
     |      Return the y coordinate of the pointer on the root window.
     |
     |  winfo_reqheight(self)
     |      Return requested height of this widget.
     |
     |  winfo_reqwidth(self)
     |      Return requested width of this widget.
     |
     |  winfo_rgb(self, color)
     |      Return a tuple of integer RGB values in range(65536) for color in this widget.
     |
     |  winfo_rootx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |
     |  winfo_rooty(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |
     |  winfo_screen(self)
     |      Return the screen name of this widget.
     |
     |  winfo_screencells(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |
     |  winfo_screendepth(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |
     |  winfo_screenheight(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |
     |  winfo_screenmmheight(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |
     |  winfo_screenmmwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |
     |  winfo_screenvisual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |
     |  winfo_screenwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |
     |  winfo_server(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |
     |  winfo_toplevel(self)
     |      Return the toplevel widget of this widget.
     |
     |  winfo_viewable(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |
     |  winfo_visual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |
     |  winfo_visualid(self)
     |      Return the X identifier for the visual for this widget.
     |
     |  winfo_visualsavailable(self, includeids=False)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if includeids is true is given also the X identifier.
     |
     |  winfo_vrootheight(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |
     |  winfo_vrootwidth(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |
     |  winfo_vrootx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |
     |  winfo_vrooty(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |
     |  winfo_width(self)
     |      Return the width of this widget.
     |
     |  winfo_x(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |
     |  winfo_y(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Misc:
     |
     |  __dict__
     |      dictionary for instance variables (if defined)
     |
     |  __weakref__
     |      list of weak references to the object (if defined)
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Pack:
     |
     |  forget = pack_forget(self)
     |
     |  info = pack_info(self)
     |
     |  pack = pack_configure(self, cnf={}, **kw)
     |
     |  pack_configure(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW (or subset) - position widget according to
     |                                given direction
     |      before=widget - pack it before you will pack widget
     |      expand=bool - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |
     |  pack_forget(self)
     |      Unmap this widget and do not use it for the packing order.
     |
     |  pack_info(self)
     |      Return information about the packing options
     |      for this widget.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Place:
     |
     |  place = place_configure(self, cnf={}, **kw)
     |
     |  place_configure(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in=master - master relative to which the widget is placed
     |      in_=master - see 'in' option description
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW (or subset) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" or "outside" - whether to take border width of
     |                                         master widget into account
     |
     |  place_forget(self)
     |      Unmap this widget.
     |
     |  place_info(self)
     |      Return information about the placing options
     |      for this widget.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from Grid:
     |
     |  grid = grid_configure(self, cnf={}, **kw)
     |
     |  grid_configure(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      in=master - use master to contain this widget
     |      in_=master - see 'in' option description
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |
     |  grid_forget(self)
     |      Unmap this widget.
     |
     |  grid_info(self)
     |      Return information about the options
     |      for positioning this widget in a grid.
     |
     |  grid_remove(self)
     |      Unmap this widget but remember the grid options.
     |
     |  location = grid_location(self, x, y)

help>


tk.Listbox(
    master: Misc | None = ...,
    cnf: dict[str, Any] | None = ..., *, activestyle: Literal['dotbox', 'none', 'underline'] = ..., 
    background: _Color = ..., bd: _ScreenUnits = ..., bg: _Color = ...,
    border: _ScreenUnits = ..., borderwidth: _ScreenUnits = ..., cursor: _Cursor = ...,
    disabledforeground: _Color = ..., exportselection: int = ..., fg: _Color = ...,
    font: _FontDescription = ...,
    foreground: _Color = ...,
    height: int = ..., highlightbackground: _Color = ..., highlightcolor: _Color = ...,
    highlightthickness: _ScreenUnits = ..., justify: Literal['left', 'center', 'right'] = ...,
    listvariable: Variable = ..., name: str = ..., relief: _Relief = ...,
    selectbackground: _Color = ..., selectborderwidth: _ScreenUnits = ...,
    selectforeground: _Color = ..., selectmode: str = ..., setgrid: bool = ...,
    state: Literal['normal', 'disabled'] = ..., takefocus: _TakeFocusValue = ...,
    width: int = ..., xscrollcommand: _XYScrollCommand = ...,
    yscrollcommand: _XYScrollCommand = ...) -> None

Construct a listbox widget with the parent MASTER.

Valid resource names: background, bd, bg, borderwidth, cursor, exportselection, fg, font, foreground, height, highlightbackground, highlightcolor, highlightthickness, relief, selectbackground, selectborderwidth, selectforeground, selectmode, setgrid, takefocus, width, xscrollcommand, yscrollcommand, listvariable.

